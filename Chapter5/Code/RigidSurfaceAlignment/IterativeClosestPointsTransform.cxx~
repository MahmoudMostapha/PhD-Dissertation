#include <vtkVersion.h>
#include <vtkSmartPointer.h>
#include <vtkTransform.h>
#include <vtkPoints.h>
#include <vtkPolyData.h>
#include <vtkCellArray.h>
#include <vtkIterativeClosestPointTransform.h>
#include <vtkTransformPolyDataFilter.h>
#include <vtkLandmarkTransform.h>
#include <vtkMath.h>
#include <vtkMatrix4x4.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkGenericDataObjectReader.h>
#include <vtkPolyDataWriter.h>
#include <vtkProperty.h>


int main(int argc, char ** argv)
{  

    if(argc < 5)
    {
        std::cerr << "Usage: " << argv[0] << " SourceSurfaceName TargetSurfaceName InnerSurfaceName OuterSurfaceName" << endl;
        return EXIT_FAILURE;
    }

  vtkSmartPointer<vtkPolyData> source =
    vtkSmartPointer<vtkPolyData>::New();
  vtkSmartPointer<vtkPolyData> target =
    vtkSmartPointer<vtkPolyData>::New();
  vtkSmartPointer<vtkPolyData> inner =
    vtkSmartPointer<vtkPolyData>::New();
  vtkSmartPointer<vtkPolyData> outer =
    vtkSmartPointer<vtkPolyData>::New();

    std::cout << "Reading data..." << std::endl;
    std::string strSource = argv[1];
    std::string strTarget = argv[2];
    std::string strInner  = argv[3];
    std::string strOuter  = argv[4];

    vtkSmartPointer<vtkGenericDataObjectReader> sourceReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    sourceReader->SetFileName(strSource.c_str());
    sourceReader->Update();
    source->ShallowCopy(sourceReader->GetOutput());

    vtkSmartPointer<vtkGenericDataObjectReader> targetReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    targetReader->SetFileName(strTarget.c_str());
    targetReader->Update();
    target->ShallowCopy(targetReader->GetOutput());

    vtkSmartPointer<vtkGenericDataObjectReader> innerReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    innerReader->SetFileName(strInner.c_str());
    innerReader->Update();
    inner->ShallowCopy(innerReader->GetOutput());

    vtkSmartPointer<vtkGenericDataObjectReader> outerReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    outerReader->SetFileName(strOuter.c_str());
    outerReader->Update();
    outer->ShallowCopy(outerReader->GetOutput());
  
  
  // Setup ICP transform
  vtkSmartPointer<vtkIterativeClosestPointTransform> icp = 
      vtkSmartPointer<vtkIterativeClosestPointTransform>::New();
  icp->SetSource(source);
  icp->SetTarget(target);
  icp->GetLandmarkTransform()->SetModeToSimilarity();
  icp->SetMaximumNumberOfIterations(20);
  //icp->StartByMatchingCentroidsOn();
  icp->Modified();
  icp->Update();
  
  // Get the resulting transformation matrix (this matrix takes the source points to the target points)
  vtkSmartPointer<vtkMatrix4x4> m = icp->GetMatrix();
  std::cout << "The resulting matrix is: " << *m << std::endl;
  
  // Transform the inner points by the ICP solution
  vtkSmartPointer<vtkTransformPolyDataFilter> icpInnerTransformFilter =
    vtkSmartPointer<vtkTransformPolyDataFilter>::New();
#if VTK_MAJOR_VERSION <= 5
  icpInnerTransformFilter->SetInput(inner);
#else
  icpInnerTransformFilter->SetInputData(inner);
#endif
  icpInnerTransformFilter->SetTransform(icp);
  icpInnerTransformFilter->Update();

  // Transform the outer points by the ICP solution
  vtkSmartPointer<vtkTransformPolyDataFilter> icpOuterTransformFilter =
    vtkSmartPointer<vtkTransformPolyDataFilter>::New();
#if VTK_MAJOR_VERSION <= 5
  icpOuterTransformFilter->SetInput(inner);
#else
  icpOuterTransformFilter->SetInputData(inner);
#endif
  icpOuterTransformFilter->SetTransform(icp);
  icpOuterTransformFilter->Update();

  std::string strTrsInner  = "aligned_Inner_" + argv[1];
  std::string strTrsOuter  = "aligned_Outer_" + argv[1];;

 vtkSmartPointer<vtkPolyDataWriter> Innerpolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  Innerpolywriter->SetFileName(strTrsInner.c_str());
  Innerpolywriter->SetInputData(icpInnerTransformFilter->GetOutput());
  Innerpolywriter->Write();

 vtkSmartPointer<vtkPolyDataWriter> Outerpolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  Outerpolywriter->SetFileName(strTrsOuter.c_str());
  Outerpolywriter->SetInputData(icpOuterTransformFilter->GetOutput());
  Outerpolywriter->Write();
  
  return EXIT_SUCCESS;
}


