#include <vtkVersion.h>
#include <vtkSmartPointer.h>
#include <vtkTransform.h>
#include <vtkPoints.h>
#include <vtkProperty.h>
#include <vtkPointData.h>
#include <vtkPolyData.h>
#include <vtkCellArray.h>
#include <vtkIterativeClosestPointTransform.h>
#include <vtkTransformPolyDataFilter.h>
#include <vtkLandmarkTransform.h>
#include <vtkMath.h>
#include <vtkMatrix4x4.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkGenericDataObjectReader.h>
#include <vtkPolyDataWriter.h>
#include <vtkIntersectionPolyDataFilter.h>
#include <vtkProperty.h>
#include <fstream>
#include <vtkWarpVector.h>
#include <vtkPolyDataNormals.h>
#include <vtkDataSetAttributes.h>
#include <vtkDistancePolyDataFilter.h>
#include <vtkCleanPolyData.h>


int main(int argc, char ** argv)
{  

    if(argc < 5)
    {
        std::cerr << "Usage: " << argv[0] << " SourceSurfaceName TargetSurfaceName" << endl;
        return EXIT_FAILURE;
    }

  vtkSmartPointer<vtkPolyData> source =
    vtkSmartPointer<vtkPolyData>::New();
  vtkSmartPointer<vtkPolyData> target =
    vtkSmartPointer<vtkPolyData>::New();


    std::cout << "Reading data..." << std::endl;
    std::string strSource = argv[1];
    std::string strTarget = argv[2];

    vtkSmartPointer<vtkGenericDataObjectReader> sourceReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    sourceReader->SetFileName(strSource.c_str());
    sourceReader->Update();
    source->ShallowCopy(sourceReader->GetOutput());

    vtkSmartPointer<vtkGenericDataObjectReader> targetReader =
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
    targetReader->SetFileName(strTarget.c_str());
    targetReader->Update();
    target->ShallowCopy(targetReader->GetOutput());
  
  
  // Setup ICP transform
  vtkSmartPointer<vtkIterativeClosestPointTransform> icp = 
      vtkSmartPointer<vtkIterativeClosestPointTransform>::New();
  icp->SetSource(source);
  icp->SetTarget(target);
  icp->GetLandmarkTransform()->SetModeToBodyRigid();
  icp->SetMaximumNumberOfIterations(100);
  //icp->StartByMatchingCentroidsOn();
  icp->Modified();
  icp->Update();
  
  // Get the resulting transformation matrix (this matrix takes the source points to the target points)
  vtkSmartPointer<vtkMatrix4x4> m = icp->GetMatrix();
  std::cout << *m << endl; 
  
  // Transform the inner points by the ICP solution
  vtkSmartPointer<vtkTransformPolyDataFilter> icpTransformFilter =
    vtkSmartPointer<vtkTransformPolyDataFilter>::New();
#if VTK_MAJOR_VERSION <= 5
  icpTransformFilter->SetInput(source);
#else
  icpTransformFilter->SetInputData(source);
#endif
  icpTransformFilter->SetTransform(icp);
  icpTransformFilter->Update();
 
  std::string strTrsInner  = "aligned_" + strSource;
  vtkSmartPointer<vtkPolyDataWriter> Innerpolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  Innerpolywriter->SetFileName(strTrsInner.c_str());
  Innerpolywriter->SetInputData(icpInnerTransformFilter->GetOutput());
  Innerpolywriter->Write();

  std::string SubstrSource = strSource.substr(0, strSource.size()-4);
  std::string strTrs  = "Transformation_Matrix_" + SubstrSource + ".txt";
  std::ofstream Result;
  Result.open (strTrs.c_str());
  Result << *m << endl; 
  Result.close();

 return EXIT_SUCCESS;

}


