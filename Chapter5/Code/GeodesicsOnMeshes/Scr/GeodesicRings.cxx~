#include <vtkSmartPointer.h>
#include <vtkPolyDataReader.h>
#include "vtkIdList.h"
#include <vtkSortDataArray.h>
#include <vtkDoubleArray.h>
#include "vtkFastMarchingGeodesicDistance.h"
#include <vtkPolyDataWriter.h>
#include <vtkFloatArray.h>
#include <vtkPointData.h>
#include <vtkPolyData.h>
#include <vtkPointData.h>
#include <vtkCellData.h>
#include <vtkFastMarchingGeodesicPath.h>
#include <vtkContourFilter.h>
#include <vtkStripper.h>
#include <vtkSplineFilter.h>
#include <vtkKochanekSpline.h>
#include <vtkPointLocator.h>
#include <vtkLine.h>
#include <vtkCellArray.h>
#include <vtkPolyData.h>
#include <vtkPoints.h>
#include <vtkAppendPolyData.h>
#include <vtkMath.h>
#include <vtkPolyDataNormals.h>
#include <stdlib.h>     /* abs */
#include <math.h>       /* cos */
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <ctime>
#include <vtkCleanPolyData.h>
#include <vtkMath.h>

#define PI 3.14159265


double *row(double array[][3], int which)
{
    double* result = new double[3];
    for (int i=0; i<3; i++)
    {
        result[i] = array[which][i];
    }
    return result;
    delete[] result;
}

int CheckDistance(double P1[3], double P2[3], double Thr)
{
    int check = 1;
    if (vtkMath::Distance2BetweenPoints(P1, P2) > Thr)
    {
    check = 0;
    }
    return check;
}

vtkSmartPointer<vtkIdList> FixPointsOrder(vtkSmartPointer<vtkIdList> InputidList, vtkPolyData* PolyData)
{
    vtkSmartPointer<vtkIdList> OutputidList = vtkSmartPointer<vtkIdList>::New();

    std::cout << "Unsorted IDs: ";
    for(int i = 0; i < InputidList->GetNumberOfIds() - 1; i++)
    {
    std::cout << InputidList->GetId(i) << " ";
    OutputidList->InsertNextId(InputidList->GetId(i));
    }
    std::cout <<  std::endl;

    vtkSmartPointer<vtkFloatArray> Array = vtkFloatArray::SafeDownCast(PolyData->GetPointData()->GetArray("Local_Direction"));
    vtkSmartPointer<vtkFloatArray> keyArray = vtkSmartPointer<vtkFloatArray>::New();

    std::cout << "Unsorted Values: ";
    for(int i = 0; i < OutputidList->GetNumberOfIds(); i++)
    {
    std::cout << Array->GetValue(OutputidList->GetId(i)) << " ";
    keyArray->InsertNextValue(Array->GetValue(OutputidList->GetId(i)));;
    }
    std::cout <<  std::endl;

    vtkSmartPointer<vtkSortDataArray> sortDataArray = vtkSmartPointer<vtkSortDataArray>::New();
    sortDataArray->Sort(keyArray, OutputidList);

    std::cout << "Sorted IDs: ";
    for(int i = 0; i < OutputidList->GetNumberOfIds(); i++)
    {
    std::cout << OutputidList->GetId(i) << " ";
    }
    std::cout <<  std::endl;

    std::cout << "Sorted Values: ";
    for(int i = 0; i < OutputidList->GetNumberOfIds(); i++)
    {
    std::cout << Array->GetValue(OutputidList->GetId(i)) << " ";
    }
    std::cout <<  std::endl;

    return OutputidList;
}

vtkSmartPointer<vtkIdList> FixLinePointsOrderWithPrevious(vtkSmartPointer<vtkIdList> idList,vtkSmartPointer<vtkIdList> idList_Previous, vtkPolyData* PolyData)
{
    std::cout << "Unsorted IDs: ";
    for(int i = 0; i < idList->GetNumberOfIds(); i++)
    {
    std::cout << idList->GetId(i) << " ";
    }
    std::cout <<  std::endl;

    std::cout << "outer IDs: ";
    for(int i = 0; i < idList_Previous->GetNumberOfIds(); i++)
    {
    std::cout << idList_Previous->GetId(i) << " ";
    }
    std::cout <<  std::endl;

    vtkSmartPointer<vtkIdList> OutputidList = vtkSmartPointer<vtkIdList>::New();
    double p1[3];
    double p2[3];
    double squaredDistance;
    double Min_Dist;
    int Min_Dist_ID;
    int Min_Loc;
    for(int i = 0; i < idList_Previous->GetNumberOfIds(); i++)
    {
    //std::cout << "i =  " << i <<  std::endl;
    PolyData->GetPoint(idList_Previous->GetId(i),p1);
    PolyData->GetPoint(idList->GetId(0),p2);
    squaredDistance = vtkMath::Distance2BetweenPoints(p1, p2);
    Min_Dist = squaredDistance;
    Min_Dist_ID = idList->GetId(0);
    Min_Loc = 0;
    	for(int j = 1; j < idList->GetNumberOfIds(); j++)
    	{
    	  //std::cout << "j =  " << j <<  std::endl;
	if (idList->GetId(j) > -1)
	{
          PolyData->GetPoint(idList->GetId(j),p2);
          squaredDistance = vtkMath::Distance2BetweenPoints(p1, p2);
          if (squaredDistance < Min_Dist)
	     {
          	Min_Dist = squaredDistance;
          	Min_Dist_ID = idList->GetId(j);
		Min_Loc = j;
	     }
	 }
    	}
    OutputidList->InsertNextId(Min_Dist_ID);
    idList->SetId(Min_Loc,-1);
    }

    std::cout << "Sorted IDs: ";
    for(int i = 0; i < OutputidList->GetNumberOfIds(); i++)
    {
    std::cout << OutputidList->GetId(i) << " ";
    }
    std::cout <<  std::endl;

    return OutputidList;
}

int main(int argc, char* argv[])
{

if (argc < 4)
{
std::cerr << "Usage: " << argv[0] << "SurfaceMesh.vtk OutputCSVFileName Step [StartVertex] [EndVertex]" << std::endl;
return EXIT_FAILURE;
}

double Step = atof(argv[3]);
std::cout << "Slected Step size is " << Step << " mm" << std::endl;

int start_s=clock();
// Get all surface data from the file
vtkSmartPointer<vtkPolyDataReader> surfacereader =
vtkSmartPointer<vtkPolyDataReader>::New();
surfacereader->SetFileName(argv[1]);
surfacereader->Update();
vtkPolyData* inputPolyData = surfacereader->GetOutput();
std::cout << "Input surface has " << inputPolyData->GetNumberOfPoints() << " points." << std::endl;

ofstream Result;
Result.open(argv[2]);

vtkIdType StartVertex;
vtkIdType EndVertex;
if (argc > 5)
{
StartVertex = atoi(argv[4]);
EndVertex = atoi(argv[5]);
}
else
{
StartVertex = 0;
EndVertex = inputPolyData->GetNumberOfPoints();
}


for(vtkIdType Vertex = StartVertex; Vertex < EndVertex; Vertex++)
{

  // Add the Seed
  vtkSmartPointer<vtkIdList> seed =
      vtkSmartPointer<vtkIdList>::New();
  seed->InsertNextId(Vertex);
  std::cout << "Starting from Vertex " << seed->GetId(0) << std::endl;

//-----------------------------------------------Estimate Local Orientation---------------------------------------------------------

  vtkSmartPointer<vtkFloatArray> Theta = vtkFloatArray::SafeDownCast(inputPolyData->GetPointData()->GetArray("Theta"));
  vtkSmartPointer<vtkFloatArray> Phi = vtkFloatArray::SafeDownCast(inputPolyData->GetPointData()->GetArray("Phi"));

  vtkSmartPointer<vtkFloatArray> Local_Direction = vtkSmartPointer<vtkFloatArray>::New();
  Local_Direction->SetNumberOfComponents(1);
  Local_Direction->SetName("Local_Direction");

  float lat1 = Theta->GetValue(seed->GetId(0));
  float lon1 = Phi->GetValue(seed->GetId(0));

  for(vtkIdType ID = 0; ID < inputPolyData->GetNumberOfPoints(); ID++)
     {
	  float lat2 = Theta->GetValue(ID);
	  float lon2 = Phi->GetValue(ID);
	  float dlat = lat2 - lat1;
	  float dlon = lon2 - lon1;
	  float y = sin(lon2-lon1)*cos(lat2);
	  float x = cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2-lon1);
	  float tc1;
	  if (y > 0) 
	    {
	    if (x > 0)  { tc1 = atan(y/x);}
	    if (x < 0)  { tc1 = PI - atan(-y/x);}
	    if (x == 0) { tc1 = PI/2;}
	    }
	  if (y < 0) 
	    {
	    if (x > 0)  { tc1 = -atan(-y/x);}
	    if (x < 0)  { tc1 = atan(y/x)-PI;}
	    if (x == 0) { tc1 = 3*PI/2;}
	    }
	  if (y == 0) 
	    {
	    if (x > 0)  { tc1 = 0;}
	    if (x < 0)  { tc1 = PI;}
	    if (x == 0) { tc1 = -1;}
	    }
          
          Local_Direction->InsertNextValue(tc1+PI);
 
     }

  inputPolyData->GetPointData()->AddArray(Local_Direction);
//-----------------------------------------------Geodesic Contours Extraction--------------------------------------------------------

  // Geodesic Filter
  vtkSmartPointer<vtkFastMarchingGeodesicDistance> Geodesic =
  vtkSmartPointer<vtkFastMarchingGeodesicDistance>::New();
  Geodesic->SetInputData(inputPolyData);
  Geodesic->SetFieldDataName("GeoDist");
  //Geodesic->SetDistanceStopCriterion(30);
  Geodesic->SetSeeds(seed);
  Geodesic->Update();
  std::cout << "Geodesic Distances Computation Done.. " << std::endl;

   vtkPolyData* outputPolyData = Geodesic->GetOutput();
   outputPolyData->GetPointData()->SetActiveScalars("GeoDist");
   std::cout << "Output surface has " << outputPolyData->GetNumberOfPoints() << " points." << std::endl;

   // Create cutter
  vtkSmartPointer<vtkContourFilter> cutter =
    vtkSmartPointer<vtkContourFilter>::New();
  cutter->SetInputData(outputPolyData);
  cutter->SetValue(0, 0.5*Step);
  cutter->SetValue(1, 1*Step);
  cutter->SetValue(2, 1.5*Step);
  cutter->SetValue(3, 2*Step);
  cutter->SetValue(4, 2.5*Step);
  cutter->SetValue(5, 3*Step);
  //cutter->UseScalarTreeOn();
  cutter->Update();

  vtkSmartPointer<vtkCleanPolyData> cleaner =
  vtkSmartPointer<vtkCleanPolyData>::New();
  cleaner->SetInputConnection(cutter->GetOutputPort());
  cleaner->Update();

  vtkSmartPointer<vtkPolyDataNormals> Normals =
  vtkSmartPointer<vtkPolyDataNormals>::New();
  Normals->SetInputConnection(cleaner->GetOutputPort());
  Normals->Update();

  std::stringstream ss;
  ss << seed->GetId(0);
  std::string Prefix = ss.str();
  std::string ResultFileName;
  /* Debuging
  ResultFileName = Prefix + "_" + argv[1] + "_cutter.vtk";
  // Write Results
  vtkSmartPointer<vtkPolyDataWriter> PolyDatacutterwriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  PolyDatacutterwriter->SetFileName(ResultFileName.c_str());
  PolyDatacutterwriter->SetInputConnection(Normals->GetOutputPort());
  PolyDatacutterwriter->Write();
  */
  vtkSmartPointer<vtkStripper> stripper =
    vtkSmartPointer<vtkStripper>::New();
  stripper->SetInputConnection(Normals->GetOutputPort());
  //stripper->JoinContiguousSegmentsOn();
  stripper->Update();

  vtkPolyData* ContoursPolyData = stripper->GetOutput();
  std::cout << "Stripped Contours file has " << ContoursPolyData->GetNumberOfLines() << " lines." << std::endl;
  /* Debuging
  ResultFileName = Prefix + "_" + argv[1] + "_stripper1.vtk";
  // Write Results
  vtkSmartPointer<vtkPolyDataWriter> PolyDatastripperwriter1 = vtkSmartPointer<vtkPolyDataWriter>::New();
  PolyDatastripperwriter1->SetFileName(ResultFileName.c_str());
  PolyDatastripperwriter1->SetInputData(ContoursPolyData);
  PolyDatastripperwriter1->Write();
  */

  if (ContoursPolyData->GetNumberOfLines() > 6)
     {
        ContoursPolyData->GetLines()->InitTraversal();
        vtkSmartPointer<vtkIdList> LinesidList = vtkSmartPointer<vtkIdList>::New();
        vtkSmartPointer<vtkFloatArray> keyArray = vtkSmartPointer<vtkFloatArray>::New();
      	for (int i = 0; i < ContoursPolyData->GetNumberOfLines(); i++)
      	{
                ContoursPolyData->GetLines()->GetNextCell(LinesidList);
                double Length = 0.0;
		for(vtkIdType j = 0; j < LinesidList->GetNumberOfIds() - 1; j++)
		      {
			 double p1[3];
			 double p2[3];
    			 ContoursPolyData->GetPoint(LinesidList->GetId(j),p1);
    			 ContoursPolyData->GetPoint(LinesidList->GetId(j+1),p2);
		         Length+= vtkMath::Distance2BetweenPoints(p1, p2);
		      }
		keyArray->InsertNextValue(Length);
        }

 	vtkSmartPointer<vtkIdList> Index = vtkSmartPointer<vtkIdList>::New();
    	for (int i = 0; i < ContoursPolyData->GetNumberOfLines(); i++)
     	{
       		Index->InsertNextId(i);
     	}

        vtkSmartPointer<vtkSortDataArray> sortDataArray = vtkSmartPointer<vtkSortDataArray>::New();	
	sortDataArray->Sort(keyArray, Index);

      	for (int i = 0; i < (ContoursPolyData->GetNumberOfLines() - 6); i++)
      	{
      	ContoursPolyData->BuildLinks();
      	ContoursPolyData->DeleteCell(Index->GetId(i));
      	}
      	ContoursPolyData->RemoveDeletedCells();
     }

  std::cout << "Stripped Contours file has " << ContoursPolyData->GetNumberOfLines() << " lines." << std::endl;

  vtkSmartPointer<vtkCleanPolyData> cleaner2 =
  vtkSmartPointer<vtkCleanPolyData>::New();
  cleaner2->SetInputData(ContoursPolyData);
  cleaner2->Update();
  ContoursPolyData = cleaner2->GetOutput();

  /* Debuging
  ResultFileName = Prefix + "_" + argv[1] + "_stripper2.vtk";
  // Write Results
  vtkSmartPointer<vtkPolyDataWriter> PolyDatastripperwriter2 = vtkSmartPointer<vtkPolyDataWriter>::New();
  PolyDatastripperwriter2->SetFileName(ResultFileName.c_str());
  PolyDatastripperwriter2->SetInputData(ContoursPolyData);
  PolyDatastripperwriter2->Write();
  */

  vtkSmartPointer<vtkKochanekSpline> spline =
  vtkSmartPointer<vtkKochanekSpline>::New();
  spline->SetDefaultTension(.5);
 
  // Subdivide Contours
  vtkSmartPointer<vtkSplineFilter> divide =
    vtkSmartPointer<vtkSplineFilter>::New();
  divide->SetInputData(ContoursPolyData);
  divide->SetSubdivideToSpecified();
  divide->SetNumberOfSubdivisions(12);
  divide->SetSpline(spline);
  divide->GetSpline()->ClosedOn(); 
  divide->Update();

  vtkPolyData* ContoursDividedPolyData = divide->GetOutput();
  std::cout << "Contours Divided file has " << ContoursDividedPolyData->GetNumberOfLines() << " lines." << std::endl;
  std::cout << "Output surface has " << outputPolyData->GetNumberOfPoints() << " points." << std::endl;
/*
  // Update GeoDist after deleting Lines
  vtkSmartPointer<vtkFloatArray> Level = vtkFloatArray::SafeDownCast(ContoursPolyData->GetPointData()->GetArray("GeoDist"));
  vtkSmartPointer<vtkIdList> LinesidList = vtkSmartPointer<vtkIdList>::New();
  vtkSmartPointer<vtkFloatArray> keyArray = vtkSmartPointer<vtkFloatArray>::New();
  vtkSmartPointer<vtkFloatArray> LineIndex = vtkSmartPointer<vtkFloatArray>::New();
  ContoursDividedPolyData->GetLines()->InitTraversal();
    for (int i = 0; i < ContoursDividedPolyData->GetNumberOfLines(); i++)
    {
    ContoursDividedPolyData->GetLines()->GetNextCell(LinesidList);
    double Length = 0.0;
    for(vtkIdType j = 0; j < LinesidList->GetNumberOfIds() - 1; j++)
      {
	 double p1[3];
	 double p2[3];
	 ContoursPolyData->GetPoint(LinesidList->GetId(j),p1);
	 ContoursPolyData->GetPoint(LinesidList->GetId(j+1),p2);
         Length+= vtkMath::Distance2BetweenPoints(p1, p2);
      }
      keyArray->InsertNextValue(Length);
      float LevelValue = (i+1)*0.5*Step;
      std::cout << "Level Value :" << LevelValue <<  std::endl;
      std::cout << "Length :" << Length <<  std::endl;
      LineIndex->InsertNextValue(LevelValue);
    }
   vtkSmartPointer<vtkSortDataArray> sortDataArray = vtkSmartPointer<vtkSortDataArray>::New();	
   sortDataArray->Sort(keyArray, LineIndex);

   ContoursDividedPolyData->GetLines()->InitTraversal();
    for (int i = 0; i < ContoursDividedPolyData->GetNumberOfLines(); i++)
    {
    ContoursDividedPolyData->GetLines()->GetNextCell(LinesidList);
    std::cout << "Level Value :" << LineIndex->GetValue(i) <<  std::endl;
    float NewLevelValue = LineIndex->GetValue(i);
    for(vtkIdType j = 0; j < LinesidList->GetNumberOfIds(); j++)
      {
	 Level->SetValue(LinesidList->GetId(j),NewLevelValue);
      }
    ContoursDividedPolyData->GetPointData()->AddArray(Level);
    }
*/
  vtkSmartPointer<vtkFloatArray> Level = vtkFloatArray::SafeDownCast(ContoursDividedPolyData->GetPointData()->GetArray("GeoDist"));
  vtkSmartPointer<vtkIdList> idList = vtkSmartPointer<vtkIdList>::New();

 //----------------------------------------------------FixIdLists----------------------------------------------------------------------
 int idList_All[12][6];
 ContoursDividedPolyData->GetLines()->InitTraversal();
 for(int Line_ID = 0;  Line_ID < ContoursDividedPolyData->GetNumberOfLines(); Line_ID++)
  {
     ContoursDividedPolyData->GetLines()->GetNextCell(idList);

	if ( abs( Level->GetValue(idList->GetId(0)) - 0.5*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][0] = idList->GetId(i);
		           }
		 
		 }

	else if ( abs( Level->GetValue(idList->GetId(0)) - 1.0*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][1] = idList->GetId(i);
		           }
		 
		 }

	else if ( abs( Level->GetValue(idList->GetId(0)) - 1.5*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][2] = idList->GetId(i);
		           }
		 
		 }

	else if ( abs( Level->GetValue(idList->GetId(0)) - 2.0*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][3] = idList->GetId(i);
		           }
		 
		 }

	else if ( abs( Level->GetValue(idList->GetId(0)) - 2.5*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][4] = idList->GetId(i);
		           }
		 
		 }


	else if ( abs( Level->GetValue(idList->GetId(0)) - 3.0*Step ) < 0.00001 )
		 {
	      		   std::cout << Line_ID << " Current Level = " << Level->GetValue(idList->GetId(0)) << std::endl;                  
		           for (int i = 0; i < 12; i++)
		           {
		                   idList_All[i][5] = idList->GetId(i);
		           }
		 
		 }
  }

  for(int i = 4; i > -1 ; i--)
  {
   vtkSmartPointer<vtkIdList> idList_outer = vtkSmartPointer<vtkIdList>::New();
   vtkSmartPointer<vtkIdList> idList_inner = vtkSmartPointer<vtkIdList>::New();
    for (int j = 0; j < 12; j++)
     {
       idList_outer->InsertNextId(idList_All[j][i+1]);
       idList_inner->InsertNextId(idList_All[j][i]);
     }
  idList_inner = FixLinePointsOrderWithPrevious(idList_inner,idList_outer, ContoursDividedPolyData);
    for (int j = 0; j < 12; j++)
     {
       idList_All[j][i] = idList_inner->GetId(j);
     }
  }


 //---------------------------------------------------------------------------------------------------------------------------------------

  vtkSmartPointer<vtkFloatArray> ContoursDivided_Labels = vtkSmartPointer<vtkFloatArray>::New();
  ContoursDivided_Labels->SetNumberOfComponents(1);
  ContoursDivided_Labels->SetName("ContoursDivided_Labels");

 std::cout << " ContoursDividedPolyData has " << ContoursDividedPolyData->GetNumberOfPoints() << " points." << std::endl;                  
 for(vtkIdType ID = 0; ID < ContoursDividedPolyData->GetNumberOfPoints(); ID++)
     {
       ContoursDivided_Labels->InsertNextValue(0);
     } 


 double C1[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][0],P);
           C1[i][0] = P[0];
	   C1[i][1] = P[1];
	   C1[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][0], i+1);
   }
 
 double C2[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][1],P);
           C2[i][0] = P[0];
	   C2[i][1] = P[1];
	   C2[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][1], i+1);
   }

 double C3[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][2],P);
           C3[i][0] = P[0];
	   C3[i][1] = P[1];
	   C3[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][2], i+1);
   }

 double C4[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][3],P);
           C4[i][0] = P[0];
	   C4[i][1] = P[1];
	   C4[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][3], i+1);
   }

 double C5[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][4],P);
           C5[i][0] = P[0];
	   C5[i][1] = P[1];
	   C5[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][4], i+1);
   }

 double C6[12][3];
   for (int i = 0; i < 12; i++)
   {
           double P[3];
	   ContoursDividedPolyData->GetPoint(idList_All[i][5],P);
           C6[i][0] = P[0];
	   C6[i][1] = P[1];
	   C6[i][2] = P[2];
	   ContoursDivided_Labels->SetValue(idList_All[i][5], i+1);
   }

  ContoursDividedPolyData->GetPointData()->AddArray(ContoursDivided_Labels);

  // Build a locator
  vtkSmartPointer<vtkPointLocator> pointLocator = vtkSmartPointer<vtkPointLocator>::New();
  pointLocator->SetDataSet(inputPolyData);
  pointLocator->AutomaticOn();
  pointLocator->SetNumberOfPointsPerBucket(2);
  pointLocator->BuildLocator();
  pointLocator->Update();

//if (seed->GetId(0) % (rand() % outputPolyData->GetNumberOfPoints()) == 0)
if (seed->GetId(0) < -1)
{

  ResultFileName = Prefix + "_" + argv[1] + "_ContoursDivided.vtk";
  // Write Results
  vtkSmartPointer<vtkPolyDataWriter> PolyDataContoursDividedwriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  PolyDataContoursDividedwriter->SetFileName(ResultFileName.c_str());
  PolyDataContoursDividedwriter->SetInputData(ContoursDividedPolyData);
  PolyDataContoursDividedwriter->Write();

//-----------------------------------------------Grid Visualization---------------------------------------------------------

//***************************************************Outer Four rays*************************************************************
   int check =1;
   std::cout << "Outer Paths Calculation. " << std::endl;

  // Outer 1
  vtkIdType Start1;
  Start1 = pointLocator->FindClosestPoint(row(C6,0));
  std::cout << "Starting Path from Vertex " << Start1 << std::endl;
  vtkIdType stop1;
  stop1 = pointLocator->FindClosestPoint(row(C4,0));
  vtkSmartPointer<vtkIdList> Stop1 = vtkSmartPointer<vtkIdList>::New();
  Stop1->InsertNextId(stop1);
  std::cout << "Stopping at Vertex " << Stop1->GetId(0) << std::endl;

  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> Geodesicpath1 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C6,0), row(C4,0), 2) == 0 )
{
  Geodesicpath1->SetBeginPointId(Start1);
  Geodesicpath1->SetSeeds(Stop1);
  Geodesicpath1->SetInputConnection(0,surfacereader->GetOutputPort());
  Geodesicpath1-> SetInterpolationOrder(1);
  Geodesicpath1->Update();
}
  // Outer 2
  vtkIdType Start2;
  Start2 = pointLocator->FindClosestPoint(row(C6,3));
  std::cout << "Starting Path from Vertex " << Start2 << std::endl;
  vtkIdType stop2;
  stop2 = pointLocator->FindClosestPoint(row(C4,3));
  vtkSmartPointer<vtkIdList> Stop2 = vtkSmartPointer<vtkIdList>::New();
  Stop2->InsertNextId(stop2);
  std::cout << "Stopping at Vertex " << Stop2->GetId(0) << std::endl;
  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> Geodesicpath2 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C6,3), row(C4,3), 2) == 0 )
{
  Geodesicpath2->SetBeginPointId(Start2);
  Geodesicpath2->SetSeeds(Stop2);
  Geodesicpath2->SetInputConnection(0,surfacereader->GetOutputPort());
  Geodesicpath2-> SetInterpolationOrder(1);
  Geodesicpath2->Update();
}

  // Outer 3
  vtkIdType Start3;
  Start3 = pointLocator->FindClosestPoint(row(C6,6));
  std::cout << "Starting Path from Vertex " << Start3 << std::endl;
  vtkIdType stop3;
  stop3 = pointLocator->FindClosestPoint(row(C4,6));
  vtkSmartPointer<vtkIdList> Stop3 = vtkSmartPointer<vtkIdList>::New();
  Stop3->InsertNextId(stop3);
  std::cout << "Stopping at Vertex " << Stop3->GetId(0) << std::endl;
  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> Geodesicpath3 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C6,6), row(C4,6), 2) == 0 )
{
  Geodesicpath3->SetBeginPointId(Start3);
  Geodesicpath3->SetSeeds(Stop3);
  Geodesicpath3->SetInputConnection(0,surfacereader->GetOutputPort());
  Geodesicpath3-> SetInterpolationOrder(1);
  Geodesicpath3->Update();
}

  // Outer 4
  vtkIdType Start4;
  Start4 = pointLocator->FindClosestPoint(row(C6,9));
  std::cout << "Starting Path from Vertex " << Start4 << std::endl;
  vtkIdType stop4;
  stop4 = pointLocator->FindClosestPoint(row(C4,9));
  vtkSmartPointer<vtkIdList> Stop4 = vtkSmartPointer<vtkIdList>::New();
  Stop4->InsertNextId(stop4);
  std::cout << "Stopping at Vertex " << Stop4->GetId(0) << std::endl;
  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> Geodesicpath4 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C6,9), row(C4,9), 2) == 0 )
{
  Geodesicpath4->SetBeginPointId(Start4);
  Geodesicpath4->SetSeeds(Stop4);
  Geodesicpath4->SetInputConnection(0,surfacereader->GetOutputPort());
  Geodesicpath4-> SetInterpolationOrder(1);
  Geodesicpath4->Update();
}

 //***************************************************Middle Two rays*************************************************************
  
  std::cout << "Middle Paths Calculation. " << std::endl;

  // Middle 1
  vtkIdType StartM1;
  StartM1 = pointLocator->FindClosestPoint(row(C4,0));
  std::cout << "Starting Path from Vertex " << StartM1 << std::endl;
  vtkIdType stopM1;
  stopM1 = pointLocator->FindClosestPoint(row(C2,0));
  vtkSmartPointer<vtkIdList> StopM1 = vtkSmartPointer<vtkIdList>::New();
  StopM1->InsertNextId(stopM1);
  std::cout << "Stopping at Vertex " << StopM1->GetId(0) << std::endl;
  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> GeodesicpathM1 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C4,0), row(C2,0), 2) == 0 )
{
  GeodesicpathM1->SetBeginPointId(StartM1);
  GeodesicpathM1->SetSeeds(StopM1);
  GeodesicpathM1->SetInputConnection(0,surfacereader->GetOutputPort());
  GeodesicpathM1-> SetInterpolationOrder(1);
  GeodesicpathM1->Update();
}

  // Middle 2
  vtkIdType StartM2;
  StartM2 = pointLocator->FindClosestPoint(row(C4,6));
  std::cout << "Starting Path from Vertex " << StartM2 << std::endl;
  vtkIdType stopM2;
  stopM2 = pointLocator->FindClosestPoint(row(C2,6));
  vtkSmartPointer<vtkIdList> StopM2 = vtkSmartPointer<vtkIdList>::New();
  StopM2->InsertNextId(stopM2);
  std::cout << "Stopping at Vertex " << StopM2->GetId(0) << std::endl;
  // Extract Path
  vtkSmartPointer<vtkFastMarchingGeodesicPath> GeodesicpathM2 =
  vtkSmartPointer<vtkFastMarchingGeodesicPath>::New();
  if ( CheckDistance(row(C4,6), row(C2,6), 2) == 0 )
{
  GeodesicpathM2->SetBeginPointId(StartM2);
  GeodesicpathM2->SetSeeds(StopM2);
  GeodesicpathM2->SetInputConnection(0,surfacereader->GetOutputPort());
  GeodesicpathM2-> SetInterpolationOrder(1);
  GeodesicpathM2->Update();
}

   // Create cutter
  vtkSmartPointer<vtkContourFilter> cutter2 =
    vtkSmartPointer<vtkContourFilter>::New();
  cutter2->SetInputData(outputPolyData);
  cutter2->SetValue(1, 1*Step);
  cutter2->SetValue(2, 2*Step);
  cutter2->SetValue(3, 3*Step);
  cutter2->Update();

  vtkSmartPointer<vtkCleanPolyData> cleaner3 =
  vtkSmartPointer<vtkCleanPolyData>::New();
  cleaner3->SetInputConnection(cutter2->GetOutputPort());
  cleaner3->Update();

  vtkSmartPointer<vtkPolyDataNormals> Normals2 =
  vtkSmartPointer<vtkPolyDataNormals>::New();
  Normals2->SetInputConnection(cleaner3->GetOutputPort());
  Normals2->Update();

  vtkSmartPointer<vtkStripper> stripper2 =
    vtkSmartPointer<vtkStripper>::New();
  stripper2->SetInputConnection(Normals2->GetOutputPort());
  stripper2->Update();

  vtkPolyData* ContoursPolyData2 = stripper2->GetOutput();
  std::cout << "Contours file has " << ContoursPolyData2->GetNumberOfLines() << " lines." << std::endl;

  if (ContoursPolyData2->GetNumberOfLines() > 3)
     {
        ContoursPolyData2->GetLines()->InitTraversal();
        vtkSmartPointer<vtkIdList> LinesidList = vtkSmartPointer<vtkIdList>::New();
        vtkSmartPointer<vtkFloatArray> keyArray = vtkSmartPointer<vtkFloatArray>::New();
      	for (int i = 0; i < ContoursPolyData2->GetNumberOfLines(); i++)
      	{
                ContoursPolyData2->GetLines()->GetNextCell(LinesidList);
                double Length = 0.0;
		for(vtkIdType j = 0; j < LinesidList->GetNumberOfIds() - 1; j++)
		      {
			 double p1[3];
			 double p2[3];
    			 ContoursPolyData2->GetPoint(LinesidList->GetId(j),p1);
    			 ContoursPolyData2->GetPoint(LinesidList->GetId(j+1),p2);
		         Length+= vtkMath::Distance2BetweenPoints(p1, p2);
		      }
		keyArray->InsertNextValue(Length);
        }

 	vtkSmartPointer<vtkIdList> Index = vtkSmartPointer<vtkIdList>::New();
    	for (int i = 0; i < ContoursPolyData2->GetNumberOfLines(); i++)
     	{
       		Index->InsertNextId(i);
     	}

        vtkSmartPointer<vtkSortDataArray> sortDataArray = vtkSmartPointer<vtkSortDataArray>::New();	
	sortDataArray->Sort(keyArray, Index);

      	for (int i = 0; i < (ContoursPolyData2->GetNumberOfLines() - 3); i++)
      	{
      	ContoursPolyData2->BuildLinks();
      	ContoursPolyData2->DeleteCell(Index->GetId(i));
      	}
      	ContoursPolyData2->RemoveDeletedCells();
     }

  std::cout << "Stripped Contours file has " << ContoursPolyData2->GetNumberOfLines() << " lines." << std::endl;

  vtkSmartPointer<vtkCleanPolyData> cleaner4 =
  vtkSmartPointer<vtkCleanPolyData>::New();
  cleaner4->SetInputData(ContoursPolyData2);
  cleaner4->Update();
  ContoursPolyData2 = cleaner4->GetOutput();

  //Append the meshes 
  vtkSmartPointer<vtkAppendPolyData> appendFilter =
    vtkSmartPointer<vtkAppendPolyData>::New();
  appendFilter->AddInputData(ContoursPolyData2);
  appendFilter->AddInputData(Geodesicpath1->GetOutput());
  appendFilter->AddInputData(Geodesicpath2->GetOutput());
  appendFilter->AddInputData(Geodesicpath3->GetOutput());
  appendFilter->AddInputData(Geodesicpath4->GetOutput());
  appendFilter->AddInputData(GeodesicpathM1->GetOutput());
  appendFilter->AddInputData(GeodesicpathM2->GetOutput());
  appendFilter->Update();
  vtkPolyData* Grid = appendFilter->GetOutput();
  std::cout << "Final Grid file has " << Grid->GetNumberOfLines() << " lines." << std::endl;

  //std::stringstream ss;
  //ss << seed->GetId(0);
  //std::string Prefix = ss.str();
  //std::string ResultFileName = Prefix + "_" + argv[1] + "_output.vtk";
  ResultFileName = Prefix + "_" + argv[1] + "_output.vtk";
  // Write Results
  vtkSmartPointer<vtkPolyDataWriter> PolyDatapolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  PolyDatapolywriter->SetFileName(ResultFileName.c_str());
  PolyDatapolywriter->SetInputData(outputPolyData);
  PolyDatapolywriter->Write();

  ResultFileName = Prefix + "_" + argv[1] + "_ContoursPolyData.vtk";
  vtkSmartPointer<vtkPolyDataWriter> ContoursPolyDatapolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  ContoursPolyDatapolywriter->SetFileName(ResultFileName.c_str());
  ContoursPolyDatapolywriter->SetInputData(ContoursPolyData2);
  ContoursPolyDatapolywriter->Write();

  ResultFileName = Prefix + "_" + argv[1] + "_Grid.vtk";
  vtkSmartPointer<vtkPolyDataWriter> Gridpolywriter = vtkSmartPointer<vtkPolyDataWriter>::New();
  Gridpolywriter->SetFileName(ResultFileName.c_str());
  Gridpolywriter->SetInputData(Grid);
  Gridpolywriter->Write();

}
//-----------------------------------------------Extract Regions Vertices---------------------------------------------------------
Result << seed->GetId(0);
//Region (1)
//Result << "," << seed->GetId(0);
for (int i = 0 ; i < 12 ; i=i+4)
{
Result << "," << pointLocator->FindClosestPoint(row(C1,i));
}
for (int i = 0 ; i < 12 ; i=i+4)
{
Result << "," << pointLocator->FindClosestPoint(row(C2,i)) ;
}
Result << "," << 0 ;
Result << endl;
Result << seed->GetId(0);
//Region (2)
for (int i = 0 ; i <= 6 ; i=i+6)
{
Result << "," << pointLocator->FindClosestPoint(row(C2,i));
}
for (int i = 2 ; i < 6 ; i=i+2)
{
Result << "," << pointLocator->FindClosestPoint(row(C3,i));
}
for (int i = 0 ; i <= 6 ; i=i+6)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C1,2)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C1,4))))/2 *10;
Result << endl;
Result << seed->GetId(0);
//Region (3)
for (int i = 6 ; i <= 12 ; i=i+6)
{
Result << "," << pointLocator->FindClosestPoint(row(C2,i%12));
}
for (int i = 8 ; i < 12 ; i=i+2)
{
Result << "," << pointLocator->FindClosestPoint(row(C3,i%12));
}
for (int i = 6 ; i <= 12 ; i=i+6)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i%12));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C3,8)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C3,10))))/2 *10;
Result << endl;
Result << seed->GetId(0);
//Region (4)
for (int i = 0 ; i <= 3 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i));
}
for (int i = 1 ; i < 3 ; i++)
{
Result << "," << pointLocator->FindClosestPoint(row(C5,i));
}
for (int i = 0 ; i <= 3 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C6,i));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,1)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,2))))/2 *100;
Result << endl;
Result << seed->GetId(0);
//Region (5)
for (int i = 3 ; i <= 6 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i));
}
for (int i = 4 ; i < 6 ; i++)
{
Result << "," << pointLocator->FindClosestPoint(row(C5,i));
}
for (int i = 3 ; i <= 6 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C6,i));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,4)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,2))))/2 *100;
Result << endl;
Result << seed->GetId(0);
//Region (6)
for (int i = 6 ; i <= 9 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i));
}
for (int i = 7 ; i < 9 ; i++)
{
Result << "," << pointLocator->FindClosestPoint(row(C5,i));
}
for (int i = 6 ; i <= 9 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C6,i));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,7)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,8))))/2 *100;
Result << endl;
Result << seed->GetId(0);
//Region (7)
for (int i = 9 ; i <= 12 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C4,i%12));
}
for (int i = 10 ; i < 12 ; i++)
{
Result << "," << pointLocator->FindClosestPoint(row(C5,i%12));
}
for (int i = 9 ; i <= 12 ; i=i+3)
{
Result << "," << pointLocator->FindClosestPoint(row(C6,i%12));
}
Result << "," << (Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,10%12)))+Local_Direction->GetValue(pointLocator->FindClosestPoint(row(C5,11%12))))/2 *100;
Result << endl;
}

Result.close();
int stop_s=clock();
cout << "time: " << (((float)(stop_s-start_s))/CLOCKS_PER_SEC)/60 <<" min" << endl;

return EXIT_SUCCESS;
}

