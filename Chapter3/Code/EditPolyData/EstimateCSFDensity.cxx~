#include <vtkGenericDataObjectReader.h>
#include <vtkStructuredGrid.h>
#include <vtkSmartPointer.h>
#include <vtkPolyData.h>
#include <string>
#include "vtkDoubleArray.h"
#include <vtkXMLPolyDataWriter.h>
#include <vtkPointData.h>

#include "itkImageFileReader.h"
#include "itkImageFileWriter.h"
#include "itkNeighborhoodIterator.h"
#include "itkImageRegionIterator.h"
#include "itkImageFileWriter.h"


int main ( int argc, char *argv[] )
{
  // Ensure a filename was specified
  if(argc != 5)
    {
    std::cerr << "Usage: " << argv[0] << " InputSurfacename InputSegmentationImageFileName label radius OutputSurfacename CSFDensityImageName" << endl;
    return EXIT_FAILURE;
    }

  // Get the Surface filename from the command line
  std::string inputSurfaceFilename = argv[1];

  // Get all surface data from the file
  vtkSmartPointer<vtkGenericDataObjectReader> reader = 
      vtkSmartPointer<vtkGenericDataObjectReader>::New();
  reader->SetFileName(inputSurfaceFilename.c_str());
  reader->Update();

  vtkPolyData* output = reader->GetPolyDataOutput();
  std::cout << "Input surface has " << output->GetNumberOfPoints() << " points." << std::endl;

  // Get the segmentation filename from the command line
  std::string inputSegmentationFilename = argv[2];

  // Get all segmentation data from the image
  const unsigned int Dimension = 3;
  typedef double                      PixelType;
  typedef itk::Image< PixelType, Dimension > ImageType;
  typedef itk::ImageFileReader< ImageType >  ReaderType;
  ReaderType::Pointer Imagereader = ReaderType::New();
  Imagereader->SetFileName(inputSegmentationFilename.c_str());
  Imagereader->Update();

  typedef itk::NeighborhoodIterator<ImageType> NeighborhoodIterator;
  typedef itk::ImageRegionIterator<ImageType>       ImageIterator;

  ImageType::Pointer inputimage  = Imagereader->GetOutput();
  ImageType::Pointer outputimage = ImageType::New();
  outputimage->CopyInformation(inputimage);
  outputimage->SetRegions(inputimage->GetRequestedRegion());
  outputimage->Allocate();


  // A radius of 1 in all axial directions gives a 3x3x3x3x... neighborhood.
  NeighborhoodIterator::RadiusType radius;
  for (unsigned int i = 0; i < ImageType::ImageDimension; ++i) radius[i] = atoi(argv[4]);

  // Initializes the iterators on the input & output image regions
  NeighborhoodIterator it(radius, inputimage, outputimage->GetRequestedRegion());
  ImageIterator out(outputimage, outputimage->GetRequestedRegion());

  // Iterates over the input and output
  for (it.GoToBegin(), out = out.Begin(); ! it.IsAtEnd(); ++it, ++out )
    {
      float accum = 0.0;
      for (unsigned int i = 0; i < it.Size(); ++i)
        {   
          if (it.GetPixel(i) == atoi(argv[3]))
          {
          accum += 1;  
          }
        }
      out.Set(accum/(float)(it.Size()));
    }

  typedef itk::ImageFileWriter< ImageType > WriterType;
	WriterType::Pointer Imagewriter = WriterType::New();
	Imagewriter->SetInput(outputimage);
	Imagewriter->SetFileName(argv[4]);

	try
	{
		Imagewriter->Update();
	}
	catch (itk::ExceptionObject & error)
	{
		std::cerr << "Error: " << error << std::endl;
		return EXIT_FAILURE;
	}

  vtkSmartPointer<vtkDoubleArray> Array = vtkSmartPointer<vtkDoubleArray>::New();
  Array->SetNumberOfComponents(1);
  Array->SetName("CSFDensity");

  // Write all of the coordinates of the points in the vtkPolyData to the console.
  for(vtkIdType i = 0; i < output->GetNumberOfPoints(); i++)
    {
    double p[3];
    output->GetPoint(i,p);
    ImageType::IndexType pixelIndex;
    typedef itk::Point< double, ImageType::ImageDimension > PointType;
    PointType point;
    point[0] = p[0];    // x coordinate
    point[1] = p[1];    // y coordinate
    point[2] = p[2];    // z coordinate
    const bool isInside = outputimage->TransformPhysicalPointToIndex( point, pixelIndex );
    ImageType::PixelType CSFDensity = outputimage->GetPixel( pixelIndex );
    Array->InsertNextValue(CSFDensity);
    }
    output->GetPointData()->SetScalars(Array);
    vtkSmartPointer<vtkXMLPolyDataWriter> writer = vtkSmartPointer<vtkXMLPolyDataWriter>::New();
    writer->SetFileName(argv[3]);
    writer->SetInputData(output);
    writer->Write();

  return EXIT_SUCCESS;
}
